//+------------------------------------------------------------------+
//|                                                 PropEA\_HDG.mq5 |
//+------------------------------------------------------------------+
\#property copyright "t2an1s"
\#property link      "[http://www.yourwebsite.com](http://www.yourwebsite.com)"
\#property version   "2.00"
\#property strict

// Include necessary libraries
\#include \<Trade\Trade.mqh>           // Trading functions

// Create trade object for order operations
CTrade trade;

//+------------------------------------------------------------------+
//| Enumeration for Communication Method                              |
//+------------------------------------------------------------------+
enum ENUM\_COMMUNICATION\_METHOD {
GLOBAL\_VARS,   // Global Variables
FILE\_BASED     // File-Based
};

// Input Parameters - General Settings
input group "General Settings"
input string    EA\_Name = "PropEA Hedge";              // EA Name
input int       Magic\_Number = 789123;                 // Magic Number (must match main EA setting)
input bool      EnableTrading = true;                  // Enable Trading
input ENUM\_COMMUNICATION\_METHOD CommunicationMethod = GLOBAL\_VARS; // Communication Method

// Input Parameters - Hedge Settings
input group "Hedge Settings"
input int       SourceEA\_Magic = 123456;               // Main Strategy EA Magic

// Input Parameters - Cost Recovery Settings
input group "Cost Recovery Settings"
input bool      EnableBleedFeature = true;             // Enable Hedge Bleed
input double    MinimumLot = 0.01;                     // Minimum Lot Size

// Global variables
double initialBalance;                                 // Starting balance
bool   bleedDone = false;                              // Hedge bleed flag

//+------------------------------------------------------------------+
//| Expert initialization function                                    |
//+------------------------------------------------------------------+
int OnInit()
{
// Set trade parameters
trade.SetExpertMagicNumber(Magic\_Number);

// Store initial balance
initialBalance = AccountInfoDouble(ACCOUNT\_BALANCE);

// Create dashboard
CreateDashboard();

Print("PropEA Hedge initialized.");
return(INIT\_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
// Clean up resources
DeleteDashboard();

Print("PropEA Hedge stopped. Reason: ", reason);
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
// Skip if trading is disabled
if(!EnableTrading) return;

// Update dashboard
UpdateDashboard();

// Check for signals from main EA
CheckForHedgeSignals();

// Manage open hedge positions
ManageHedgePositions();
}

//+------------------------------------------------------------------+
//| Get tick count from a string (hash function)                     |
//+------------------------------------------------------------------+
ulong StringGetTickCount(string text)
{
ulong result = 0;
for(int i = 0; i < StringLen(text); i++)
{
result += (ulong)StringGetCharacter(text, i);
}
return result;
}

//+------------------------------------------------------------------+
//| Check for hedge signals from main EA                             |
//+------------------------------------------------------------------+
void CheckForHedgeSignals()
{
// Check if there's a signal from the main EA
if(CommunicationMethod == GLOBAL\_VARS)
{
// Check if a new signal exists via timestamp
datetime signalTime = 0;
if(GlobalVariableCheck("EASignal\_Time\_"+IntegerToString(SourceEA\_Magic)))
signalTime = (datetime)GlobalVariableGet("EASignal\_Time\_"+IntegerToString(SourceEA\_Magic));

```
  static datetime lastProcessedTime = 0;
  
  if(signalTime > 0 && signalTime != lastProcessedTime)
  {
     // Get signal details
     string signalType = "";
     ulong typeCode = 0;
     
     if(GlobalVariableCheck("EASignal_Type_"+IntegerToString(SourceEA_Magic)))
        typeCode = (ulong)GlobalVariableGet("EASignal_Type_"+IntegerToString(SourceEA_Magic));
     
     // Convert type code back to string based on known signal types
     if(typeCode == StringGetTickCount("OPEN")) signalType = "OPEN";
     else if(typeCode == StringGetTickCount("MODIFY")) signalType = "MODIFY";
     else if(typeCode == StringGetTickCount("PARTIAL_CLOSE")) signalType = "PARTIAL_CLOSE";
     else if(typeCode == StringGetTickCount("BLEED")) signalType = "BLEED";
     
     // Get direction
     string direction = "";
     ulong dirCode = 0;
     
     if(GlobalVariableCheck("EASignal_Direction_"+IntegerToString(SourceEA_Magic)))
        dirCode = (ulong)GlobalVariableGet("EASignal_Direction_"+IntegerToString(SourceEA_Magic));
     
     if(dirCode == StringGetTickCount("BUY")) direction = "BUY";
     else if(dirCode == StringGetTickCount("SELL")) direction = "SELL";
     
     // Get other parameters
     double volume = 0, sl = 0, tp = 0;
     
     if(GlobalVariableCheck("EASignal_Volume_"+IntegerToString(SourceEA_Magic)))
        volume = GlobalVariableGet("EASignal_Volume_"+IntegerToString(SourceEA_Magic));
     
     if(GlobalVariableCheck("EASignal_SL_"+IntegerToString(SourceEA_Magic)))
        sl = GlobalVariableGet("EASignal_SL_"+IntegerToString(SourceEA_Magic));
     
     if(GlobalVariableCheck("EASignal_TP_"+IntegerToString(SourceEA_Magic)))
        tp = GlobalVariableGet("EASignal_TP_"+IntegerToString(SourceEA_Magic));
     
     // Only process if we have a valid signal type and direction
     if(signalType != "" && direction != "")
     {
        // Process signal
        ProcessSignal(signalType, direction, volume, tp, sl);
        
        // Update last processed time
        lastProcessedTime = signalTime;
     }
  }
```

}
else // File-based communication
{
string fileName = "EURUSD\_Synergy\_Signals.txt";
if(FileIsExist(fileName))
{
int fileHandle = FileOpen(fileName, FILE\_READ|FILE\_TXT);
if(fileHandle != INVALID\_HANDLE)
{
string content = FileReadString(fileHandle);
FileClose(fileHandle);

```
        // Delete file to avoid re-processing
        FileDelete(fileName);
        
        // Parse signal data using the built-in StringSplit function
        string parts[];
        int count = StringSplit(content, ',', parts);
        
        if(count >= 6)
        {
           string signalType = parts[0];
           string direction = parts[1];
           double volume = StringToDouble(parts[2]);
           double tp = StringToDouble(parts[3]);
           double sl = StringToDouble(parts[4]);
           
           // Process signal
           ProcessSignal(signalType, direction, volume, tp, sl);
        }
     }
  }
```

}
}

//+------------------------------------------------------------------+
//| Process incoming hedge signal                                    |
//+------------------------------------------------------------------+
void ProcessSignal(string signalType, string direction, double volume, double tp, double sl)
{
if(signalType == "OPEN")
{
// Open new hedge position
if(direction == "BUY" && volume > 0)
{
if(volume < MinimumLot) volume = MinimumLot;
trade.Buy(volume, \_Symbol, 0, sl, tp, "Hedge");
Print("Hedge: Opened BUY position, Volume: ", volume, ", SL: ", sl, ", TP: ", tp);
}
else if(direction == "SELL" && volume > 0)
{
if(volume < MinimumLot) volume = MinimumLot;
trade.Sell(volume, \_Symbol, 0, sl, tp, "Hedge");
Print("Hedge: Opened SELL position, Volume: ", volume, ", SL: ", sl, ", TP: ", tp);
}
}
else if(signalType == "MODIFY")
{
// Modify existing position
for(int i = 0; i < PositionsTotal(); i++)
{
ulong ticket = PositionGetTicket(i);
if(ticket && PositionSelectByTicket(ticket))
{
if(PositionGetString(POSITION\_SYMBOL) == \_Symbol &&
PositionGetInteger(POSITION\_MAGIC) == Magic\_Number)
{
trade.PositionModify(ticket, sl, tp);
Print("Hedge: Modified position, SL: ", sl, ", TP: ", tp);
break;
}
}
}
}
else if(signalType == "PARTIAL\_CLOSE" && volume > 0)
{
// Partially close position
for(int i = 0; i < PositionsTotal(); i++)
{
ulong ticket = PositionGetTicket(i);
if(ticket && PositionSelectByTicket(ticket))
{
if(PositionGetString(POSITION\_SYMBOL) == \_Symbol &&
PositionGetInteger(POSITION\_MAGIC) == Magic\_Number)
{
if(volume < MinimumLot) volume = MinimumLot;
trade.PositionClosePartial(ticket, volume);
Print("Hedge: Partially closed position, Volume: ", volume);
break;
}
}
}
}
else if(signalType == "BLEED" && volume > 0 && EnableBleedFeature)
{
// Execute hedge bleed (close 50% of hedge)
for(int i = 0; i < PositionsTotal(); i++)
{
ulong ticket = PositionGetTicket(i);
if(ticket && PositionSelectByTicket(ticket))
{
if(PositionGetString(POSITION\_SYMBOL) == \_Symbol &&
PositionGetInteger(POSITION\_MAGIC) == Magic\_Number)
{
if(volume < MinimumLot) volume = MinimumLot;
trade.PositionClosePartial(ticket, volume);
Print("Hedge: Executed hedge bleed, Volume: ", volume);
bleedDone = true;
break;
}
}
}
}
}

//+------------------------------------------------------------------+
//| Manage hedge positions                                           |
//+------------------------------------------------------------------+
void ManageHedgePositions()
{
// This function monitors existing hedge positions
// For now, it just ensures the positions match with what's expected

// Get current hedge status
int hedgeCount = 0;
double totalHedgeVolume = 0;

for(int i = 0; i < PositionsTotal(); i++)
{
ulong ticket = PositionGetTicket(i);
if(ticket && PositionSelectByTicket(ticket))
{
if(PositionGetString(POSITION\_SYMBOL) == \_Symbol &&
PositionGetInteger(POSITION\_MAGIC) == Magic\_Number)
{
hedgeCount++;
totalHedgeVolume += PositionGetDouble(POSITION\_VOLUME);
}
}
}

// Log current hedge state (every 60 seconds to avoid log spam)
static datetime lastLogTime = 0;
if(hedgeCount > 0 && TimeCurrent() - lastLogTime > 60)
{
Print("Managing ", hedgeCount, " hedge positions with total volume ",
DoubleToString(totalHedgeVolume, 2));
lastLogTime = TimeCurrent();
}
}

//+------------------------------------------------------------------+
//| Create dashboard                                                 |
//+------------------------------------------------------------------+
void CreateDashboard()
{
// Visual elements to create PropEA-style dashboard
string prefix = "PropEA\_Hedge\_";

// Clean up any existing objects first
DeleteDashboard();

// Main background panel
ObjectCreate(0, prefix+"Background", OBJ\_RECTANGLE\_LABEL, 0, 0, 0);
ObjectSetInteger(0, prefix+"Background", OBJPROP\_XDISTANCE, 20);
ObjectSetInteger(0, prefix+"Background", OBJPROP\_YDISTANCE, 20);
ObjectSetInteger(0, prefix+"Background", OBJPROP\_XSIZE, 300);
ObjectSetInteger(0, prefix+"Background", OBJPROP\_YSIZE, 200);
ObjectSetInteger(0, prefix+"Background", OBJPROP\_BGCOLOR, clrNavy);
ObjectSetInteger(0, prefix+"Background", OBJPROP\_BORDER\_TYPE, BORDER\_FLAT);
ObjectSetInteger(0, prefix+"Background", OBJPROP\_CORNER, CORNER\_LEFT\_UPPER);
ObjectSetInteger(0, prefix+"Background", OBJPROP\_STYLE, STYLE\_SOLID);
ObjectSetInteger(0, prefix+"Background", OBJPROP\_WIDTH, 1);
ObjectSetInteger(0, prefix+"Background", OBJPROP\_BACK, false);
ObjectSetInteger(0, prefix+"Background", OBJPROP\_SELECTABLE, false);
ObjectSetInteger(0, prefix+"Background", OBJPROP\_SELECTED, false);
ObjectSetInteger(0, prefix+"Background", OBJPROP\_HIDDEN, true);
ObjectSetInteger(0, prefix+"Background", OBJPROP\_ZORDER, 0);

// Header background
ObjectCreate(0, prefix+"HeaderBg", OBJ\_RECTANGLE\_LABEL, 0, 0, 0);
ObjectSetInteger(0, prefix+"HeaderBg", OBJPROP\_XDISTANCE, 20);
ObjectSetInteger(0, prefix+"HeaderBg", OBJPROP\_YDISTANCE, 20);
ObjectSetInteger(0, prefix+"HeaderBg", OBJPROP\_XSIZE, 300);
ObjectSetInteger(0, prefix+"HeaderBg", OBJPROP\_YSIZE, 30);
ObjectSetInteger(0, prefix+"HeaderBg", OBJPROP\_BGCOLOR, clrGold);
ObjectSetInteger(0, prefix+"HeaderBg", OBJPROP\_BORDER\_TYPE, BORDER\_FLAT);
ObjectSetInteger(0, prefix+"HeaderBg", OBJPROP\_CORNER, CORNER\_LEFT\_UPPER);
ObjectSetInteger(0, prefix+"HeaderBg", OBJPROP\_STYLE, STYLE\_SOLID);
ObjectSetInteger(0, prefix+"HeaderBg", OBJPROP\_WIDTH, 1);
ObjectSetInteger(0, prefix+"HeaderBg", OBJPROP\_BACK, false);
ObjectSetInteger(0, prefix+"HeaderBg", OBJPROP\_SELECTABLE, false);
ObjectSetInteger(0, prefix+"HeaderBg", OBJPROP\_SELECTED, false);
ObjectSetInteger(0, prefix+"HeaderBg", OBJPROP\_HIDDEN, true);
ObjectSetInteger(0, prefix+"HeaderBg", OBJPROP\_ZORDER, 1);

// Title
ObjectCreate(0, prefix+"Title", OBJ\_LABEL, 0, 0, 0);
ObjectSetInteger(0, prefix+"Title", OBJPROP\_XDISTANCE, 170);
ObjectSetInteger(0, prefix+"Title", OBJPROP\_YDISTANCE, 35);
ObjectSetString(0, prefix+"Title", OBJPROP\_TEXT, "PropEA Hedge Module");
ObjectSetInteger(0, prefix+"Title", OBJPROP\_COLOR, clrBlack);
ObjectSetInteger(0, prefix+"Title", OBJPROP\_FONTSIZE, 12);
ObjectSetInteger(0, prefix+"Title", OBJPROP\_ANCHOR, ANCHOR\_CENTER);

// Status info section
int y = 60;
// Section header
ObjectCreate(0, prefix+"InfoHeader", OBJ\_RECTANGLE\_LABEL, 0, 0, 0);
ObjectSetInteger(0, prefix+"InfoHeader", OBJPROP\_XDISTANCE, 20);
ObjectSetInteger(0, prefix+"InfoHeader", OBJPROP\_YDISTANCE, y);
ObjectSetInteger(0, prefix+"InfoHeader", OBJPROP\_XSIZE, 300);
ObjectSetInteger(0, prefix+"InfoHeader", OBJPROP\_YSIZE, 20);
ObjectSetInteger(0, prefix+"InfoHeader", OBJPROP\_BGCOLOR, clrBlack);
ObjectSetInteger(0, prefix+"InfoHeader", OBJPROP\_BORDER\_TYPE, BORDER\_FLAT);
ObjectSetInteger(0, prefix+"InfoHeader", OBJPROP\_CORNER, CORNER\_LEFT\_UPPER);
ObjectSetInteger(0, prefix+"InfoHeader", OBJPROP\_STYLE, STYLE\_SOLID);

ObjectCreate(0, prefix+"InfoTitle", OBJ\_LABEL, 0, 0, 0);
ObjectSetInteger(0, prefix+"InfoTitle", OBJPROP\_XDISTANCE, 170);
ObjectSetInteger(0, prefix+"InfoTitle", OBJPROP\_YDISTANCE, y+10);
ObjectSetString(0, prefix+"InfoTitle", OBJPROP\_TEXT, "Hedge Status");
ObjectSetInteger(0, prefix+"InfoTitle", OBJPROP\_COLOR, clrWhite);
ObjectSetInteger(0, prefix+"InfoTitle", OBJPROP\_FONTSIZE, 10);
ObjectSetInteger(0, prefix+"InfoTitle", OBJPROP\_ANCHOR, ANCHOR\_CENTER);

y += 25;

// Magic Number
ObjectCreate(0, prefix+"MagicLabel", OBJ\_LABEL, 0, 0, 0);
ObjectSetInteger(0, prefix+"MagicLabel", OBJPROP\_XDISTANCE, 30);
ObjectSetInteger(0, prefix+"MagicLabel", OBJPROP\_YDISTANCE, y);
ObjectSetString(0, prefix+"MagicLabel", OBJPROP\_TEXT, "Magic Number:");
ObjectSetInteger(0, prefix+"MagicLabel", OBJPROP\_COLOR, clrWhite);

ObjectCreate(0, prefix+"MagicValue", OBJ\_LABEL, 0, 0, 0);
ObjectSetInteger(0, prefix+"MagicValue", OBJPROP\_XDISTANCE, 150);
ObjectSetInteger(0, prefix+"MagicValue", OBJPROP\_YDISTANCE, y);
ObjectSetString(0, prefix+"MagicValue", OBJPROP\_TEXT, IntegerToString(Magic\_Number));
ObjectSetInteger(0, prefix+"MagicValue", OBJPROP\_COLOR, clrLimeGreen);

y += 20;

// Source EA Magic
ObjectCreate(0, prefix+"SourceLabel", OBJ\_LABEL, 0, 0, 0);
ObjectSetInteger(0, prefix+"SourceLabel", OBJPROP\_XDISTANCE, 30);
ObjectSetInteger(0, prefix+"SourceLabel", OBJPROP\_YDISTANCE, y);
ObjectSetString(0, prefix+"SourceLabel", OBJPROP\_TEXT, "Source EA Magic:");
ObjectSetInteger(0, prefix+"SourceLabel", OBJPROP\_COLOR, clrWhite);

ObjectCreate(0, prefix+"SourceValue", OBJ\_LABEL, 0, 0, 0);
ObjectSetInteger(0, prefix+"SourceValue", OBJPROP\_XDISTANCE, 150);
ObjectSetInteger(0, prefix+"SourceValue", OBJPROP\_YDISTANCE, y);
ObjectSetString(0, prefix+"SourceValue", OBJPROP\_TEXT, IntegerToString(SourceEA\_Magic));
ObjectSetInteger(0, prefix+"SourceValue", OBJPROP\_COLOR, clrLimeGreen);

y += 20;

// Communication Type
ObjectCreate(0, prefix+"CommLabel", OBJ\_LABEL, 0, 0, 0);
ObjectSetInteger(0, prefix+"CommLabel", OBJPROP\_XDISTANCE, 30);
ObjectSetInteger(0, prefix+"CommLabel", OBJPROP\_YDISTANCE, y);
ObjectSetString(0, prefix+"CommLabel", OBJPROP\_TEXT, "Communication:");
ObjectSetInteger(0, prefix+"CommLabel", OBJPROP\_COLOR, clrWhite);

ObjectCreate(0, prefix+"CommValue", OBJ\_LABEL, 0, 0, 0);
ObjectSetInteger(0, prefix+"CommValue", OBJPROP\_XDISTANCE, 150);
ObjectSetInteger(0, prefix+"CommValue", OBJPROP\_YDISTANCE, y);
ObjectSetString(0, prefix+"CommValue", OBJPROP\_TEXT,
CommunicationMethod == GLOBAL\_VARS ? "Global Variables" : "File-Based");
ObjectSetInteger(0, prefix+"CommValue", OBJPROP\_COLOR, clrLimeGreen);

y += 20;

// Bleed Status
ObjectCreate(0, prefix+"BleedLabel", OBJ\_LABEL, 0, 0, 0);
ObjectSetInteger(0, prefix+"BleedLabel", OBJPROP\_XDISTANCE, 30);
ObjectSetInteger(0, prefix+"BleedLabel", OBJPROP\_YDISTANCE, y);
ObjectSetString(0, prefix+"BleedLabel", OBJPROP\_TEXT, "Bleed Status:");
ObjectSetInteger(0, prefix+"BleedLabel", OBJPROP\_COLOR, clrWhite);

ObjectCreate(0, prefix+"BleedValue", OBJ\_LABEL, 0, 0, 0);
ObjectSetInteger(0, prefix+"BleedValue", OBJPROP\_XDISTANCE, 150);
ObjectSetInteger(0, prefix+"BleedValue", OBJPROP\_YDISTANCE, y);
ObjectSetString(0, prefix+"BleedValue", OBJPROP\_TEXT, bleedDone ? "Executed" : "Pending");
ObjectSetInteger(0, prefix+"BleedValue", OBJPROP\_COLOR, bleedDone ? clrLimeGreen : clrRed);
}

//+------------------------------------------------------------------+
//| Update dashboard                                                 |
//+------------------------------------------------------------------+
void UpdateDashboard()
{
string prefix = "PropEA\_Hedge\_";

// Update bleed status
ObjectSetString(0, prefix+"BleedValue", OBJPROP\_TEXT, bleedDone ? "Executed" : "Pending");
ObjectSetInteger(0, prefix+"BleedValue", OBJPROP\_COLOR, bleedDone ? clrLimeGreen : clrRed);

// Count active positions
int posCount = 0;
double totalVolume = 0;
for(int i = 0; i < PositionsTotal(); i++)
{
ulong ticket = PositionGetTicket(i);
if(ticket && PositionSelectByTicket(ticket))
{
if(PositionGetString(POSITION\_SYMBOL) == \_Symbol &&
PositionGetInteger(POSITION\_MAGIC) == Magic\_Number)
{
posCount++;
totalVolume += PositionGetDouble(POSITION\_VOLUME);
}
}
}

// Add position count info
if(!ObjectFind(0, prefix+"PosLabel"))
{
ObjectCreate(0, prefix+"PosLabel", OBJ\_LABEL, 0, 0, 0);
ObjectSetInteger(0, prefix+"PosLabel", OBJPROP\_XDISTANCE, 30);
ObjectSetInteger(0, prefix+"PosLabel", OBJPROP\_YDISTANCE, 160);
ObjectSetString(0, prefix+"PosLabel", OBJPROP\_TEXT, "Active Hedges:");
ObjectSetInteger(0, prefix+"PosLabel", OBJPROP\_COLOR, clrWhite);

ObjectCreate(0, prefix+"PosValue", OBJ_LABEL, 0, 0, 0);
ObjectSetInteger(0, prefix+"PosValue", OBJPROP_XDISTANCE, 150);
ObjectSetInteger(0, prefix+"PosValue", OBJPROP_YDISTANCE, 160);
ObjectSetInteger(0, prefix+"PosValue", OBJPROP_COLOR, clrLimeGreen);


}

ObjectSetString(0, prefix+"PosValue", OBJPROP\_TEXT,
IntegerToString(posCount) + " (" + DoubleToString(totalVolume, 2) + " lots)");
}

//+------------------------------------------------------------------+
//| Delete dashboard                                                 |
//+------------------------------------------------------------------+
void DeleteDashboard()
{
ObjectsDeleteAll(0, "PropEA\_Hedge\_");
}
