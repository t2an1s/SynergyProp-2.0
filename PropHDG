//+------------------------------------------------------------------+
//|                                                    PropEA_HDG.mq5 |
//|   Prop‑style Hedge Engine (paired with Synergy Strategy v1.01)   |
//|                                                                  |
//|  CHANGE LOG (v2.04 – 20‑May‑2025)                                |
//|   • Added bidirectional heartbeat / link‑monitor                |
//|   • Dashboard shows "Hedge Link OK / NOT OK" status             |
//|   • Debug prints on link loss / recovery                        |
//|   • Minor refactors – consts, helpers, tidy dashboard code      |
//|   • Added advanced diagnostics for troubleshooting              |
//|   • Added cross-account file-based communication support        |
//|   • Fixed file paths and permissions for cross-terminal access  |
//+------------------------------------------------------------------+
#property copyright "t2an1s"
#property link      "http://www.yourwebsite.com"
#property version   "2.04"
#property strict

#include <Trade\Trade.mqh>
CTrade trade;

//────────────────────────────────────────────────────────────────────
// 1. ENUMS & INPUTS
//────────────────────────────────────────────────────────────────────

enum ENUM_COMMUNICATION_METHOD { GLOBAL_VARS, FILE_BASED };

input group "General Settings"
input string    EA_Name               = "PropEA Hedge";   // display only
input int       Magic_Number          = 789123;            // must match hedgeMagic in prop EA
input bool      EnableTrading         = true;
input ENUM_COMMUNICATION_METHOD CommunicationMethod = FILE_BASED; // Use FILE_BASED for cross-account

input group "Hedge Settings"
input int       SourceEA_Magic        = 123456;            // magic of main strategy EA

input group "Cost Recovery Settings"
input bool      EnableBleedFeature    = true;
input double    MinimumLot            = 0.01;

//────────────────────────────────────────────────────────────────────
// 2. CONSTANTS & GLOBALS
//────────────────────────────────────────────────────────────────────

// Heart‑beat parameters (same values as prop side)
const int HEARTBEAT_SEC    = 5;
const int LINK_TIMEOUT_SEC = 15;

ulong lastPulseSent   = 0;   // when we last pinged
bool  linkWasOK       = false;

// bleed flag (dashboard)
bool  bleedDone       = false;

double initialBalance = 0;

// dashboard prefix
string dash = "PropEA_Hedge_";

// Diagnostic counters
int timerCount = 0;

// File communication constants - USE RELATIVE PATHS
string COMM_FILE_PATH = "MQL5\\Files\\MT5com.txt";
string HEARTBEAT_FILE_PATH = "MQL5\\Files\\MT5com_hedge_heartbeat.txt";
string MAIN_HEARTBEAT_FILE_PATH = "MQL5\\Files\\MT5com_heartbeat.txt";
const int FILE_WRITE_RETRY = 3;   // Number of retries for file operations
const int FILE_CHECK_SECONDS = 5;  // How often to check for heartbeat

//────────────────────────────────────────────────────────────────────
// 3. HELPER – STRING HASH (shared with prop EA)
//────────────────────────────────────────────────────────────────────
ulong StringGetTickCount(string text)
{
   ulong r=0; for(int i=0;i<StringLen(text);i++) r+=(ulong)StringGetCharacter(text,i);
   return r;
}

//────────────────────────────────────────────────────────────────────
// 4. HEART‑BEAT HELPERS
//────────────────────────────────────────────────────────────────────
void SendHeartbeat()
{
   if(CommunicationMethod == GLOBAL_VARS)
   {
      // Original global variable code
      string name = "HEDGE_HB_" + IntegerToString(Magic_Number);
      double currentTime = (double)TimeCurrent();
      GlobalVariableSet(name, currentTime);
      lastPulseSent = (ulong)TimeCurrent();
      
      // Periodically print debug info
      static datetime lastPrintTime = 0;
      if(TimeCurrent() - lastPrintTime > 60) {
         Print("Hedge EA heartbeat sent: ", name, " = ", TimeToString((datetime)currentTime));
         lastPrintTime = TimeCurrent();
      }
   }
   else // FILE_BASED
   {
      // Create heartbeat file with timestamp - MUST USE FILE_COMMON FLAG
      int fileHandle = FileOpen(HEARTBEAT_FILE_PATH, FILE_WRITE|FILE_TXT|FILE_COMMON);
      if(fileHandle != INVALID_HANDLE)
      {
         string heartbeatData = "HEDGE_HEARTBEAT," + IntegerToString(Magic_Number) + "," + 
                               IntegerToString(TimeCurrent());
         FileWriteString(fileHandle, heartbeatData);
         FileClose(fileHandle);
         
         // Report success with lower frequency to avoid log spam
         static datetime lastReport = 0;
         if(TimeCurrent() - lastReport > 60) {  // Report once per minute
            Print("Hedge EA heartbeat sent to file: ", HEARTBEAT_FILE_PATH);
            
            // VERIFY the file was actually created
            if(FileIsExist(HEARTBEAT_FILE_PATH, FILE_COMMON)) {
               Print("VERIFICATION: Heartbeat file exists and is accessible");
            } else {
               Print("ERROR: Heartbeat file was not created or is not accessible");
            }
            
            lastReport = TimeCurrent();
         }
      }
      else
      {
         int errorCode = GetLastError();
         static datetime lastErrorReport = 0;
         if(TimeCurrent() - lastErrorReport > 30) {  // Report errors every 30 seconds
            Print("ERROR: Failed to write heartbeat file: ", errorCode, " - ", 
                  errorCode == 5002 ? "Cannot create file (permissions?)" :
                  errorCode == 4103 ? "Invalid path" : 
                  errorCode == 5004 ? "No disk space" : "File error");
            Print("Attempted path: ", HEARTBEAT_FILE_PATH);
            lastErrorReport = TimeCurrent();
         }
      }
      
      lastPulseSent = (ulong)TimeCurrent();
   }
}

bool IsLinkAlive()
{
   if(CommunicationMethod == GLOBAL_VARS)
   {
      // Original global variable code (unchanged)
      string peer = "PROP_HB_" + IntegerToString(SourceEA_Magic);
      
      if(!GlobalVariableCheck(peer)) {
         static datetime lastErrorTime = 0;
         if(TimeCurrent() - lastErrorTime > 30) {
            Print("ERROR: Main EA heartbeat not found: ", peer);
            lastErrorTime = TimeCurrent();
         }
         return false;
      }
      
      double ts = GlobalVariableGet(peer);
      bool isAlive = ((TimeCurrent() - (datetime)ts) <= LINK_TIMEOUT_SEC);
      
      // Log status
      static bool wasAlive = false;
      static datetime lastStatusTime = 0;
      
      if(isAlive != wasAlive || TimeCurrent() - lastStatusTime > 60) {
         Print("Main EA link status: ", isAlive ? "ALIVE" : "DEAD", 
               " (Last beat: ", TimeToString((datetime)ts), 
               ", Age: ", TimeCurrent() - (datetime)ts, "s)");
         lastStatusTime = TimeCurrent();
         wasAlive = isAlive;
      }
      
      return isAlive;
   }
   else // FILE_BASED
   {
      // Try to read main EA's heartbeat file
      if(!FileIsExist(MAIN_HEARTBEAT_FILE_PATH, FILE_COMMON))
      {
         static datetime lastErrorReport = 0;
         if(TimeCurrent() - lastErrorReport > 30) {
            Print("WARNING: Main EA heartbeat file not found: ", MAIN_HEARTBEAT_FILE_PATH);
            lastErrorReport = TimeCurrent();
         }
         return false;
      }
      
      int fileHandle = FileOpen(MAIN_HEARTBEAT_FILE_PATH, FILE_READ|FILE_TXT|FILE_COMMON);
      if(fileHandle == INVALID_HANDLE)
      {
         Print("ERROR: Unable to open main heartbeat file. Error: ", GetLastError());
         return false;
      }
      
      string content = FileReadString(fileHandle);
      FileClose(fileHandle);
      
      // Debug: Print what we read from file
      Print("DEBUG: Read from main file: ", content);
      
      // Parse heartbeat data: format is MAIN_HEARTBEAT,magicnumber,timestamp
      string parts[];
      int count = StringSplit(content, ',', parts);
            
      // Check if magic number matches
      if(parts[1] != IntegerToString(SourceEA_Magic))
      {
         Print("ERROR: Main heartbeat has incorrect magic number: ", parts[1], 
               " expected: ", SourceEA_Magic);
         return false;
      }
      
      // Check timestamp - FIXED CALCULATION
      string timestampString = parts[2];
      if(StringLen(timestampString) > 0)
      {
         datetime heartbeatTime = (datetime)StringToInteger(timestampString);
         
         if(heartbeatTime > 0)
         {
            int ageSeconds = (int)(TimeCurrent() - heartbeatTime);  // Cast to int for proper display
            bool isAlive = ageSeconds <= LINK_TIMEOUT_SEC;
            
            // Log status periodically
            static bool wasAlive = false;
            static datetime lastStatusLog = 0;
            
            if(isAlive != wasAlive || TimeCurrent() - lastStatusLog > 60)
            {
               Print("Main EA link status: ", isAlive ? "ALIVE" : "DEAD", 
                     " (Last heartbeat: ", TimeToString(heartbeatTime), 
                     ", Age: ", ageSeconds, "s)");
               lastStatusLog = TimeCurrent();
               wasAlive = isAlive;
            }
            
            return isAlive;
         }
         else
         {
            Print("ERROR: Invalid timestamp value: ", timestampString, " parsed as ", heartbeatTime);
            return false;
         }
      }
      else
      {
         Print("ERROR: Empty timestamp string in heartbeat");
         return false;
      }
   }
}

//────────────────────────────────────────────────────────────────────
// 5. INIT / DEINIT
//────────────────────────────────────────────────────────────────────
int OnInit()
{
   Print("===== HEDGE EA STARTUP =====");
   Print("Magic_Number: ", Magic_Number);
   Print("SourceEA_Magic: ", SourceEA_Magic);
   Print("CommunicationMethod: ", CommunicationMethod == GLOBAL_VARS ? "GLOBAL_VARS" : "FILE_BASED");
   
   trade.SetExpertMagicNumber(Magic_Number);
   initialBalance = AccountInfoDouble(ACCOUNT_BALANCE);
   CreateDashboard();
   
   if(CommunicationMethod == GLOBAL_VARS)
   {
      // CRITICAL: Register our heartbeat and check if it worked
      string heartbeatName = "HEDGE_HB_" + IntegerToString(Magic_Number);
      GlobalVariableSet(heartbeatName, (double)TimeCurrent());
      
      // Verify the heartbeat was set
      if(GlobalVariableCheck(heartbeatName)) {
         double checkValue = GlobalVariableGet(heartbeatName);
         Print("HEDGE HEARTBEAT VERIFICATION: Variable ", heartbeatName, " = ", TimeToString((datetime)checkValue));
      } else {
         Print("!!! ERROR: Failed to set hedge heartbeat global variable: ", heartbeatName);
      }
      
      // Check if we can find the main EA's heartbeat
      string mainHeartbeat = "PROP_HB_" + IntegerToString(SourceEA_Magic);
      if(GlobalVariableCheck(mainHeartbeat)) {
         double mainValue = GlobalVariableGet(mainHeartbeat);
         Print("MAIN EA HEARTBEAT FOUND: ", mainHeartbeat, " = ", TimeToString((datetime)mainValue));
      } else {
         Print("!!! ERROR: Main EA heartbeat not found: ", mainHeartbeat);
         Print("Is the Main EA running? Is its Magic Number set correctly to ", SourceEA_Magic, "?");
      }
      
      // Dump all existing global variables
      Print("--- ALL GLOBAL VARIABLES AT STARTUP ---");
      for(int i=0; i<GlobalVariablesTotal(); i++) {
         string name = GlobalVariableName(i);
         double value = GlobalVariableGet(name);
         Print(i, ": ", name, " = ", value, " (time: ", TimeToString((datetime)value), ")");
      }
      Print("--------------------------------------");
   }
   else // FILE_BASED mode
   {
      // Use RELATIVE paths with FILE_COMMON flag (this is what works for cross-terminal access)
      HEARTBEAT_FILE_PATH = "MQL5\\Files\\MT5com_hedge_heartbeat.txt";
      MAIN_HEARTBEAT_FILE_PATH = "MQL5\\Files\\MT5com_heartbeat.txt";
      COMM_FILE_PATH = "MQL5\\Files\\MT5com.txt";
      
      Print("File-based communication paths:");
      Print("- Hedge heartbeat: ", HEARTBEAT_FILE_PATH);
      Print("- Main heartbeat: ", MAIN_HEARTBEAT_FILE_PATH);
      Print("- Signal file: ", COMM_FILE_PATH);
      
      // Test file access for heartbeat with FILE_COMMON flag
      int fileHandle = FileOpen(HEARTBEAT_FILE_PATH, FILE_WRITE|FILE_TXT|FILE_COMMON);
      if(fileHandle != INVALID_HANDLE)
      {
         FileWriteString(fileHandle, "HEDGE_HEARTBEAT," + IntegerToString(Magic_Number) + "," + 
                        IntegerToString(TimeCurrent()));
         FileClose(fileHandle);
         Print("File-based hedge communication initialized. Magic: ", Magic_Number);
      }
      else
      {
         int errorCode = GetLastError();
         Print("WARNING: Failed to create heartbeat file: ", errorCode, " - ", 
               errorCode == 5002 ? "Cannot create file (permissions?)" :
               errorCode == 4103 ? "Invalid path" : "File error");
         Print("File path attempted: ", HEARTBEAT_FILE_PATH);
         Print("EA will continue but file communication may not work properly");
         // Don't fail initialization - continue anyway
      }
   }
   
   // Start heartbeat timer with shorter interval for immediate feedback
   EventSetTimer(2); // Check every 2 seconds initially
   SendHeartbeat();
   linkWasOK = IsLinkAlive();
   Print("PropEA Hedge initialized. Link ", linkWasOK ? "OK ✅" : "NOT OK ❌");
   
   return(INIT_SUCCEEDED);
}

void OnDeinit(const int reason)
{
   EventKillTimer();
   DeleteDashboard();
   
   // Clean up files in file-based mode
   if(CommunicationMethod == FILE_BASED) {
      // Use absolute path for cleanup
      string commonPath = TerminalInfoString(TERMINAL_COMMONDATA_PATH) + "\\MQL5\\Files";
      string heartbeatFile = commonPath + "\\MT5com_hedge_heartbeat.txt";
      
      // Check if file exists using direct path
      int fileHandle = FileOpen(heartbeatFile, FILE_READ|FILE_TXT);
      if(fileHandle != INVALID_HANDLE) {
         FileClose(fileHandle);
         if(FileDelete(heartbeatFile)) {
            Print("Deleted hedge heartbeat file: ", heartbeatFile);
         } else {
            Print("Failed to delete heartbeat file: ", GetLastError());
         }
      }
   }
   
   Print("PropEA Hedge stopped. Reason: ", reason);
}

//────────────────────────────────────────────────────────────────────
// 6. TIMER – pulse & link monitor
//────────────────────────────────────────────────────────────────────
void OnTimer()
{
   timerCount++;
   
   // Send heartbeat
   SendHeartbeat();
   
   // For the first few timer ticks, check more frequently with detailed logs
   if(timerCount < 10) {
      if(CommunicationMethod == GLOBAL_VARS) {
         // Original global variable debug
         string heartbeatName = "HEDGE_HB_" + IntegerToString(Magic_Number);
         double currentTime = (double)TimeCurrent();
         
         Print("HEDGE HEARTBEAT DEBUG [", timerCount, "]: Set ", heartbeatName, " = ", TimeToString((datetime)currentTime));
         
         // Verify immediately after setting
         if(GlobalVariableCheck(heartbeatName)) {
            double checkValue = GlobalVariableGet(heartbeatName);
            Print("  → Verification: ", heartbeatName, " = ", TimeToString((datetime)checkValue));
         } else {
            Print("  !!! ERROR: Variable not found immediately after setting!");
         }
         
         // Check for main EA heartbeat
         string mainHeartbeat = "PROP_HB_" + IntegerToString(SourceEA_Magic);
         if(GlobalVariableCheck(mainHeartbeat)) {
            double mainValue = GlobalVariableGet(mainHeartbeat);
            Print("  → Main EA heartbeat: ", mainHeartbeat, " = ", TimeToString((datetime)mainValue));
         } else {
            Print("  !!! Main EA heartbeat still not found: ", mainHeartbeat);
         }
      }
      else { // FILE_BASED debug
         Print("HEDGE HEARTBEAT DEBUG [", timerCount, "]: Checking files");
         Print("  → My heartbeat file exists: ", FileIsExist(HEARTBEAT_FILE_PATH, FILE_COMMON) ? "YES" : "NO");
         Print("  → Main heartbeat file exists: ", FileIsExist(MAIN_HEARTBEAT_FILE_PATH, FILE_COMMON) ? "YES" : "NO");
      }
   } 
   // After 10 ticks, switch to normal heartbeat interval
   else if(timerCount == 10) {
      EventKillTimer();
      EventSetTimer(HEARTBEAT_SEC);
      Print("Switching to normal heartbeat interval of ", HEARTBEAT_SEC, " seconds");
   }
   
   // Check link status
   bool ok = IsLinkAlive();
   if(ok != linkWasOK) {
      Print("Main EA link is now ", ok ? "OK ✅" : "NOT OK ❌");
      
      // When link status changes in global vars mode, print variables
      if(CommunicationMethod == GLOBAL_VARS) {
         Print("--- GLOBAL VARIABLES AT LINK STATUS CHANGE ---");
         for(int i=0; i<GlobalVariablesTotal(); i++) {
            string name = GlobalVariableName(i);
            double value = GlobalVariableGet(name);
            Print(i, ": ", name, " = ", value, " (time: ", TimeToString((datetime)value), ")");
         }
         Print("--------------------------------------");
      }
      
      linkWasOK = ok;
   }
}

//────────────────────────────────────────────────────────────────────
// 7. ONTICK MAIN LOOP
//────────────────────────────────────────────────────────────────────
void OnTick()
{
   if(!EnableTrading) return;

   UpdateDashboard();

   // Print status in Experts tab every minute
   static datetime lastTickLog = 0;
   if(TimeCurrent() - lastTickLog > 60) {
      if(CommunicationMethod == GLOBAL_VARS) {
         string peerHB = "PROP_HB_" + IntegerToString(SourceEA_Magic);
         string myHB = "HEDGE_HB_" + IntegerToString(Magic_Number);
         
         string peerStatus = GlobalVariableCheck(peerHB) ? "FOUND" : "NOT FOUND";
         string myStatus = GlobalVariableCheck(myHB) ? "FOUND" : "NOT FOUND";
         
         Print("HEDGE EA STATUS: My heartbeat (", myHB, "): ", myStatus, 
               ", Main EA heartbeat (", peerHB, "): ", peerStatus);
      }
      else { // FILE_BASED
         Print("HEDGE EA STATUS: My heartbeat file: ", FileIsExist(HEARTBEAT_FILE_PATH, FILE_COMMON) ? "EXISTS" : "MISSING", 
               ", Main heartbeat file: ", FileIsExist(MAIN_HEARTBEAT_FILE_PATH, FILE_COMMON) ? "EXISTS" : "MISSING");
      }
      
      lastTickLog = TimeCurrent();
   }

   // Only process hedge traffic if link alive
   bool linkStatus = IsLinkAlive();
   if(!linkStatus) {
      static datetime lastLinkWarning = 0;
      if(TimeCurrent() - lastLinkWarning > 60) {
         Print("WARNING: Main EA link is DOWN. Hedge operations paused.");
         lastLinkWarning = TimeCurrent();
      }
      return;
   }

   CheckForHedgeSignals();
   ManageHedgePositions();
}

//────────────────────────────────────────────────────────────────────
// 8. COMMUNICATION LAYER (read signals)
//────────────────────────────────────────────────────────────────────

void ProcessSignal(string signalType,string direction,double volume,double tp,double sl); // fwd decl

void CheckForHedgeSignals()
{
   if(CommunicationMethod == GLOBAL_VARS)
   {
      string base = IntegerToString(SourceEA_Magic);
      string signalTimeVar = "EASignal_Time_" + base;
      
      // Periodically check if key variables exist (every minute)
      static datetime lastCheckTime = 0;
      if(TimeCurrent() - lastCheckTime > 60) {
         if(!GlobalVariableCheck(signalTimeVar)) {
            Print("INFO: Signal variable not found: ", signalTimeVar, " (this is normal if no signals have been sent)");
         }
         lastCheckTime = TimeCurrent();
      }
      
      if(!GlobalVariableCheck(signalTimeVar)) return;
      datetime sigTime = (datetime)GlobalVariableGet(signalTimeVar);
      static datetime last = 0; 
      
      if(sigTime == 0 || sigTime == last) return;

      ulong typeCode = (ulong)GlobalVariableGet("EASignal_Type_" + base);
      ulong dirCode = (ulong)GlobalVariableGet("EASignal_Direction_" + base);
      double vol = GlobalVariableGet("EASignal_Volume_" + base);
      double sl = GlobalVariableGet("EASignal_SL_" + base);
      double tp = GlobalVariableGet("EASignal_TP_" + base);

      string sType = "", dir = "";
      if(typeCode == StringGetTickCount("OPEN")) sType = "OPEN";
      else if(typeCode == StringGetTickCount("MODIFY")) sType = "MODIFY";
      else if(typeCode == StringGetTickCount("PARTIAL_CLOSE")) sType = "PARTIAL_CLOSE";
      else if(typeCode == StringGetTickCount("BLEED")) sType = "BLEED";
      else Print("WARNING: Unknown signal type code: ", typeCode);

      if(dirCode == StringGetTickCount("BUY")) dir = "BUY";
      else if(dirCode == StringGetTickCount("SELL")) dir = "SELL";
      else Print("WARNING: Unknown direction code: ", dirCode);

      if(sType != "" && dir != "") {
         Print("Signal received: ", sType, " ", dir, " ", DoubleToString(vol, 2), 
               " lots, TP: ", DoubleToString(tp, 5), ", SL: ", DoubleToString(sl, 5));
         ProcessSignal(sType, dir, vol, tp, sl);
      } else {
         Print("WARNING: Invalid signal - Type: ", sType, ", Direction: ", dir);
      }

      last = sigTime;
   }
   else // FILE_BASED
   {
      // Check if signal file exists - ADDED FILE_COMMON FLAG
      if(!FileIsExist(COMM_FILE_PATH, FILE_COMMON))
      {
         return;
      }
      
      // Try to open and read signal file - ADDED FILE_COMMON FLAG
      int fileHandle = FileOpen(COMM_FILE_PATH, FILE_READ|FILE_TXT|FILE_COMMON);
      if(fileHandle == INVALID_HANDLE)
      {
         static datetime lastErrorReport = 0;
         if(TimeCurrent() - lastErrorReport > 30)
         {
            Print("ERROR: Unable to open signal file. Error: ", GetLastError());
            lastErrorReport = TimeCurrent();
         }
         return;
      }
      
      string content = FileReadString(fileHandle);
      FileClose(fileHandle);
      
      // After reading, delete the file to prevent reprocessing - ADDED FILE_COMMON FLAG
      if(!FileDelete(COMM_FILE_PATH, FILE_COMMON))
      {
         Print("WARNING: Failed to delete signal file after reading. Error: ", GetLastError());
      }
      
      // Process signal data - format: signalType,direction,volume,tp,sl,magicNumber,timestamp
      string parts[];
      int count = StringSplit(content, ',', parts);
      
      if(count < 7)
      {
         Print("ERROR: Invalid signal format: ", content);
         return;
      }
      
      string signalType = parts[0];
      string direction = parts[1];
      double volume = StringToDouble(parts[2]);
      double tp = StringToDouble(parts[3]);
      double sl = StringToDouble(parts[4]);
      int magicNumber = (int)StringToInteger(parts[5]);
      datetime signalTime = (datetime)StringToInteger(parts[6]);
      
      // Check if magic number matches expected source
      if(magicNumber != SourceEA_Magic)
      {
         Print("WARNING: Received signal with unexpected magic number: ", magicNumber, 
               " expected: ", SourceEA_Magic);
         return;
      }
      
      // Check if signal is too old
      if(TimeCurrent() - signalTime > 60) // Signal older than 1 minute
      {
         Print("WARNING: Ignoring old signal from ", TimeToString(signalTime));
         return;
      }
      
      Print("Signal received: ", signalType, " ", direction, " ", 
            DoubleToString(volume, 2), " lots, TP: ", DoubleToString(tp, 5), 
            ", SL: ", DoubleToString(sl, 5));
      
      // Process the signal
      ProcessSignal(signalType, direction, volume, tp, sl);
   }
}

//────────────────────────────────────────────────────────────────────
// 9. EXECUTE/UPDATE/CLOSE TRADES
//────────────────────────────────────────────────────────────────────
void ProcessSignal(string signalType,string direction,double volume,double tp,double sl)
{
   if(volume<MinimumLot && volume>0) volume=MinimumLot;

   if(signalType=="OPEN")
   {
      bool ok=false;
      if(direction=="BUY" && volume>0)
         ok=trade.Buy(volume,_Symbol,0,sl,tp,"Hedge");
      else if(direction=="SELL"&& volume>0)
         ok=trade.Sell(volume,_Symbol,0,sl,tp,"Hedge");

      int ret=trade.ResultRetcode();
      if(!ok)
         Print("ERROR: Hedge OPEN failed retcode ",ret,
               " err=",GetLastError());
      else
         Print("Hedge OPEN ",direction," ",DoubleToString(volume,2),
               " ret=",ret);
   }
   else if(signalType=="MODIFY")
   {
      for(int i=0;i<PositionsTotal();i++)
         if(PositionSelectByTicket(PositionGetTicket(i)))
            if(PositionGetInteger(POSITION_MAGIC)==Magic_Number && PositionGetString(POSITION_SYMBOL)==_Symbol)
            {
               trade.PositionModify(PositionGetTicket(i),sl,tp);
               Print("Hedge MODIFY SL/TP");
               break;
            }
   }
   else if((signalType=="PARTIAL_CLOSE"||signalType=="BLEED") && volume>0)
   {
      for(int i=0;i<PositionsTotal();i++)
         if(PositionSelectByTicket(PositionGetTicket(i)))
            if(PositionGetInteger(POSITION_MAGIC)==Magic_Number && PositionGetString(POSITION_SYMBOL)==_Symbol)
            {
               trade.PositionClosePartial(PositionGetTicket(i),volume);
               Print("Hedge ",signalType," closed ",DoubleToString(volume,2));
               if(signalType=="BLEED") bleedDone=true;
               break;
            }
   }
}

// simple housekeeping print (optional)
void ManageHedgePositions()
{
   static datetime last=0; if(TimeCurrent()-last<60) return; last=TimeCurrent();
   int cnt=0; double vol=0;
   for(int i=0;i<PositionsTotal();i++)
      if(PositionSelectByTicket(PositionGetTicket(i)))
         if(PositionGetInteger(POSITION_MAGIC)==Magic_Number && PositionGetString(POSITION_SYMBOL)==_Symbol)
         { cnt++; vol+=PositionGetDouble(POSITION_VOLUME);}  
   Print("Active hedge pos: ",cnt," total ",DoubleToString(vol,2)," lots");
}

//────────────────────────────────────────────────────────────────────
// 10. DASHBOARD (very lightweight)
//────────────────────────────────────────────────────────────────────
void CreateLabel(string name,string txt,int x,int y,color c){
   ObjectCreate(0,name,OBJ_LABEL,0,0,0);
   ObjectSetInteger(0,name,OBJPROP_XDISTANCE,x);
   ObjectSetInteger(0,name,OBJPROP_YDISTANCE,y);
   ObjectSetString (0,name,OBJPROP_TEXT,txt);
   ObjectSetInteger(0,name,OBJPROP_COLOR,c);
   ObjectSetInteger(0,name,OBJPROP_CORNER,CORNER_LEFT_UPPER);
}

void CreateDashboard()
{
   DeleteDashboard();
   ObjectCreate(0,dash+"bg",OBJ_RECTANGLE_LABEL,0,0,0);
   ObjectSetInteger(0,dash+"bg",OBJPROP_XDISTANCE,20);
   ObjectSetInteger(0,dash+"bg",OBJPROP_YDISTANCE,20);
   ObjectSetInteger(0,dash+"bg",OBJPROP_XSIZE,260);
   ObjectSetInteger(0,dash+"bg",OBJPROP_YSIZE,200); // Increased height for more info
   ObjectSetInteger(0,dash+"bg",OBJPROP_BGCOLOR,clrNavy);
   ObjectSetInteger(0,dash+"bg",OBJPROP_STYLE,STYLE_SOLID);
   ObjectSetInteger(0,dash+"bg",OBJPROP_HIDDEN,true);

   CreateLabel(dash+"title","PropEA Hedge v2.04", 150,35, clrGold);
   CreateLabel(dash+"commL","Comm",  40,70, clrWhite);
   CreateLabel(dash+"commV",CommunicationMethod == GLOBAL_VARS ? "Global" : "Files", 120,70, clrYellow);
   CreateLabel(dash+"linkL","Link",   40,90, clrWhite);
   CreateLabel(dash+"linkV","--",    120,90, clrRed);
   CreateLabel(dash+"bleedL","Bleed", 40,110, clrWhite);
   CreateLabel(dash+"bleedV","Pending",120,110, clrRed);
   
   // Add diagnostic info to dashboard
   CreateLabel(dash+"magicL","Magic", 40,130, clrWhite);
   CreateLabel(dash+"magicV",IntegerToString(Magic_Number),120,130, clrWhite);
   CreateLabel(dash+"sourceL","Source", 40,150, clrWhite);
   CreateLabel(dash+"sourceV",IntegerToString(SourceEA_Magic),120,150, clrWhite);
   CreateLabel(dash+"hbL","Last HB", 40,170, clrWhite);
   CreateLabel(dash+"hbV","--",120,170, clrWhite);
}

void UpdateDashboard()
{
   color okCol = IsLinkAlive()?clrLime:clrRed;
   string txt  = IsLinkAlive()?"OK":"NOT OK";
   ObjectSetString (0,dash+"linkV",OBJPROP_TEXT ,txt);
   ObjectSetInteger(0,dash+"linkV",OBJPROP_COLOR,okCol);

   ObjectSetString (0,dash+"bleedV",OBJPROP_TEXT , bleedDone?"Executed":"Pending");
   ObjectSetInteger(0,dash+"bleedV",OBJPROP_COLOR, bleedDone?clrLime:clrRed);
   
   // Update heartbeat time
   ObjectSetString(0,dash+"hbV",OBJPROP_TEXT, TimeToString(TimeCurrent(), TIME_SECONDS));
}

void DeleteDashboard(){ ObjectsDeleteAll(0,dash); }
