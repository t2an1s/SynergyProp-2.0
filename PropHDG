//+------------------------------------------------------------------+
//|                                                    PropEA_HDG.mq5 |
//|   Prop‑style Hedge Engine (paired with Synergy Strategy v1.01)   |
//|                                                                  |
//|  CHANGE LOG (v2.01 – 18‑May‑2025)                                |
//|   • Added bidirectional heartbeat / link‑monitor                |
//|   • Dashboard shows “Hedge Link OK / NOT OK” status             |
//|   • Debug prints on link loss / recovery                        |
//|   • Minor refactors – consts, helpers, tidy dashboard code      |
//+------------------------------------------------------------------+
#property copyright "t2an1s"
#property link      "http://www.yourwebsite.com"
#property version   "2.01"
#property strict

#include <Trade\Trade.mqh>
CTrade trade;

//────────────────────────────────────────────────────────────────────
// 1. ENUMS & INPUTS
//────────────────────────────────────────────────────────────────────

enum ENUM_COMMUNICATION_METHOD { GLOBAL_VARS, FILE_BASED };

input group "General Settings"
input string    EA_Name               = "PropEA Hedge";   // display only
input int       Magic_Number          = 789123;            // must match hedgeMagic in prop EA
input bool      EnableTrading         = true;
input ENUM_COMMUNICATION_METHOD CommunicationMethod = GLOBAL_VARS;

input group "Hedge Settings"
input int       SourceEA_Magic        = 123456;            // magic of main strategy EA

input group "Cost Recovery Settings"
input bool      EnableBleedFeature    = true;
input double    MinimumLot            = 0.01;

//────────────────────────────────────────────────────────────────────
// 2. CONSTANTS & GLOBALS
//────────────────────────────────────────────────────────────────────

// Heart‑beat parameters (same values as prop side)
const int HEARTBEAT_SEC    = 5;
const int LINK_TIMEOUT_SEC = 15;

ulong lastPulseSent   = 0;   // when we last pinged
bool  linkWasOK       = false;

// bleed flag (dashboard)
bool  bleedDone       = false;

double initialBalance = 0;

// dashboard prefix
string dash = "PropEA_Hedge_";

//────────────────────────────────────────────────────────────────────
// 3. HELPER – STRING HASH (shared with prop EA)
//────────────────────────────────────────────────────────────────────
ulong StringGetTickCount(string text)
{
   ulong r=0; for(int i=0;i<StringLen(text);i++) r+=(ulong)StringGetCharacter(text,i);
   return r;
}

//────────────────────────────────────────────────────────────────────
// 4. HEART‑BEAT HELPERS
//────────────────────────────────────────────────────────────────────
void SendHeartbeat()
{
   // We should identify ourselves with our own Magic_Number
   string name = "HEDGE_HB_" + IntegerToString(Magic_Number);
   GlobalVariableSet(name, (double)TimeCurrent());
   lastPulseSent = (ulong)TimeCurrent();
}

bool IsLinkAlive()
{
   // We should look for the main EA's heartbeat using SourceEA_Magic
   string peer = "PROP_HB_" + IntegerToString(SourceEA_Magic);
   if(!GlobalVariableCheck(peer)) return false;
   double ts = GlobalVariableGet(peer);
   return ((TimeCurrent() - (datetime)ts) <= LINK_TIMEOUT_SEC);
}
//────────────────────────────────────────────────────────────────────
// 5. INIT / DEINIT
//────────────────────────────────────────────────────────────────────
int OnInit()
{
   trade.SetExpertMagicNumber(Magic_Number);
   initialBalance = AccountInfoDouble(ACCOUNT_BALANCE);

   CreateDashboard();

   // start heartbeat timer
   EventSetTimer(HEARTBEAT_SEC);
   SendHeartbeat();
   linkWasOK = IsLinkAlive();
   Print("PropEA Hedge initialised. Link ", linkWasOK?"OK ✅":"NOT OK ❌");
   return(INIT_SUCCEEDED);
}

void OnDeinit(const int reason)
{
   EventKillTimer();
   DeleteDashboard();
   Print("PropEA Hedge stopped. Reason: ", reason);
}

//────────────────────────────────────────────────────────────────────
// 6. TIMER – pulse & link monitor
//────────────────────────────────────────────────────────────────────
void OnTimer()
{
   SendHeartbeat();
   bool ok = IsLinkAlive();
   if(ok!=linkWasOK)
   {
      Print("Hedge link is now ", ok?"OK ✅":"NOT OK ❌");
      linkWasOK = ok;
   }
}

//────────────────────────────────────────────────────────────────────
// 7. ONTICK MAIN LOOP
//────────────────────────────────────────────────────────────────────
void OnTick()
{
   if(!EnableTrading) return;

   UpdateDashboard();

   // only process hedge traffic if link alive
   if(!IsLinkAlive()) return;

   CheckForHedgeSignals();
   ManageHedgePositions();
}

//────────────────────────────────────────────────────────────────────
// 8. COMMUNICATION LAYER (read signals)
//────────────────────────────────────────────────────────────────────

void ProcessSignal(string signalType,string direction,double volume,double tp,double sl); // fwd decl

void CheckForHedgeSignals()
{
   if(CommunicationMethod==GLOBAL_VARS)
   {
      string base= IntegerToString(SourceEA_Magic);
      if(!GlobalVariableCheck("EASignal_Time_"+base)) return;
      datetime sigTime=(datetime)GlobalVariableGet("EASignal_Time_"+base);
      static datetime last=0; if(sigTime==0||sigTime==last) return;

      ulong typeCode =(ulong)GlobalVariableGet("EASignal_Type_"+base);
      ulong dirCode  =(ulong)GlobalVariableGet("EASignal_Direction_"+base);
      double vol     =      GlobalVariableGet("EASignal_Volume_"+base);
      double sl      =      GlobalVariableGet("EASignal_SL_"+base);
      double tp      =      GlobalVariableGet("EASignal_TP_"+base);

      string sType="", dir="";
      if(typeCode==StringGetTickCount("OPEN"))          sType="OPEN";
      else if(typeCode==StringGetTickCount("MODIFY"))   sType="MODIFY";
      else if(typeCode==StringGetTickCount("PARTIAL_CLOSE")) sType="PARTIAL_CLOSE";
      else if(typeCode==StringGetTickCount("BLEED"))    sType="BLEED";

      if(dirCode==StringGetTickCount("BUY"))  dir="BUY";
      else if(dirCode==StringGetTickCount("SELL")) dir="SELL";

      if(sType!="" && dir!="")
         ProcessSignal(sType,dir,vol,tp,sl);

      last=sigTime;
   }
   else // FILE_BASED
   {
      string file="Synergy_Signals.txt";
      if(!FileIsExist(file)) return;
      int h=FileOpen(file,FILE_READ|FILE_TXT); if(h==INVALID_HANDLE) return;
      string content=FileReadString(h); FileClose(h); FileDelete(file);
      string p[]; if(StringSplit(content,',',p)<6) return;
      ProcessSignal(p[0],p[1],StringToDouble(p[2]),StringToDouble(p[3]),StringToDouble(p[4]));
   }
}

//────────────────────────────────────────────────────────────────────
// 9. EXECUTE/UPDATE/CLOSE TRADES
//────────────────────────────────────────────────────────────────────
void ProcessSignal(string signalType,string direction,double volume,double tp,double sl)
{
   if(volume<MinimumLot && volume>0) volume=MinimumLot;

   if(signalType=="OPEN")
   {
      if(direction=="BUY" && volume>0)
         trade.Buy(volume,_Symbol,0,sl,tp,"Hedge");
      else if(direction=="SELL"&& volume>0)
         trade.Sell(volume,_Symbol,0,sl,tp,"Hedge");
      Print("Hedge OPEN ",direction," ",DoubleToString(volume,2));
   }
   else if(signalType=="MODIFY")
   {
      for(int i=0;i<PositionsTotal();i++)
         if(PositionSelectByTicket(PositionGetTicket(i)))
            if(PositionGetInteger(POSITION_MAGIC)==Magic_Number && PositionGetString(POSITION_SYMBOL)==_Symbol)
            {
               trade.PositionModify(PositionGetTicket(i),sl,tp);
               Print("Hedge MODIFY SL/TP");
               break;
            }
   }
   else if((signalType=="PARTIAL_CLOSE"||signalType=="BLEED") && volume>0)
   {
      for(int i=0;i<PositionsTotal();i++)
         if(PositionSelectByTicket(PositionGetTicket(i)))
            if(PositionGetInteger(POSITION_MAGIC)==Magic_Number && PositionGetString(POSITION_SYMBOL)==_Symbol)
            {
               trade.PositionClosePartial(PositionGetTicket(i),volume);
               Print("Hedge ",signalType," closed ",DoubleToString(volume,2));
               if(signalType=="BLEED") bleedDone=true;
               break;
            }
   }
}

// simple housekeeping print (optional)
void ManageHedgePositions()
{
   static datetime last=0; if(TimeCurrent()-last<60) return; last=TimeCurrent();
   int cnt=0; double vol=0;
   for(int i=0;i<PositionsTotal();i++)
      if(PositionSelectByTicket(PositionGetTicket(i)))
         if(PositionGetInteger(POSITION_MAGIC)==Magic_Number && PositionGetString(POSITION_SYMBOL)==_Symbol)
         { cnt++; vol+=PositionGetDouble(POSITION_VOLUME);}  
   Print("Active hedge pos: ",cnt," total ",DoubleToString(vol,2)," lots");
}

//────────────────────────────────────────────────────────────────────
// 10. DASHBOARD (very lightweight)
//────────────────────────────────────────────────────────────────────
void CreateLabel(string name,string txt,int x,int y,color c){
   ObjectCreate(0,name,OBJ_LABEL,0,0,0);
   ObjectSetInteger(0,name,OBJPROP_XDISTANCE,x);
   ObjectSetInteger(0,name,OBJPROP_YDISTANCE,y);
   ObjectSetString (0,name,OBJPROP_TEXT,txt);
   ObjectSetInteger(0,name,OBJPROP_COLOR,c);
   ObjectSetInteger(0,name,OBJPROP_CORNER,CORNER_LEFT_UPPER);
}

void CreateDashboard()
{
   DeleteDashboard();
   ObjectCreate(0,dash+"bg",OBJ_RECTANGLE_LABEL,0,0,0);
   ObjectSetInteger(0,dash+"bg",OBJPROP_XDISTANCE,20);
   ObjectSetInteger(0,dash+"bg",OBJPROP_YDISTANCE,20);
   ObjectSetInteger(0,dash+"bg",OBJPROP_XSIZE,260);
   ObjectSetInteger(0,dash+"bg",OBJPROP_YSIZE,120);
   ObjectSetInteger(0,dash+"bg",OBJPROP_BGCOLOR,clrNavy);
   ObjectSetInteger(0,dash+"bg",OBJPROP_STYLE,STYLE_SOLID);
   ObjectSetInteger(0,dash+"bg",OBJPROP_HIDDEN,true);

   CreateLabel(dash+"title","PropEA Hedge", 150,35, clrGold);
   CreateLabel(dash+"linkL","Link",   40,70, clrWhite);
   CreateLabel(dash+"linkV","--",    120,70, clrRed);
   CreateLabel(dash+"bleedL","Bleed", 40,90, clrWhite);
   CreateLabel(dash+"bleedV","Pending",120,90, clrRed);
}

void UpdateDashboard()
{
   color okCol = IsLinkAlive()?clrLime:clrRed;
   string txt  = IsLinkAlive()?"OK":"NOT OK";
   ObjectSetString (0,dash+"linkV",OBJPROP_TEXT ,txt);
   ObjectSetInteger(0,dash+"linkV",OBJPROP_COLOR,okCol);

   ObjectSetString (0,dash+"bleedV",OBJPROP_TEXT , bleedDone?"Executed":"Pending");
   ObjectSetInteger(0,dash+"bleedV",OBJPROP_COLOR, bleedDone?clrLime:clrRed);
}

void DeleteDashboard(){ ObjectsDeleteAll(0,dash); }
